"""
SRT Subtitle File Generator

This module converts JSON transcription files generated by speech-to-text pipelines
into standard SRT (subtitle) format files. It handles timestamp conversion,
text formatting, and proper SRT file structure generation.

The module processes JSON files containing timestamped transcription chunks and
converts them into time-synchronized subtitle files suitable for video playback
applications and media players.

SRT Format Specification:
    1. Sequential subtitle number
    2. Start time --> End time (HH:MM:SS,mmm format)
    3. Subtitle text content
    4. Blank line separator

Dependencies:
    - json: For parsing input JSON transcription files
    - os: For file path operations and basename extraction
"""

import os
import json


def get_timecode_text(data, index):
    """
    Extract timestamp and text data from a transcription chunk.

    This function retrieves the start time, end time, and transcribed text
    from a specific chunk in the JSON transcription data structure.

    Args:
        data (list): List of transcription chunks from JSON file
        index (int): Index of the chunk to extract data from

    Returns:
        tuple: A tuple containing (start_time, end_time, text) where:
            - start_time (float): Start timestamp in seconds
            - end_time (float): End timestamp in seconds
            - text (str): Transcribed text content for this chunk
    """
    start_time = data[index]["timestamp"][0]
    end_time = data[index]["timestamp"][1]
    text = data[index]["text"]

    return start_time, end_time, text


def time_conversion(start, end):
    """
    Convert timestamp values from seconds to SRT time format.

    This function converts floating-point timestamp values (in seconds) to the
    SRT standard time format: HH:MM:SS,mmm where mmm represents milliseconds.

    Args:
        start (float): Start timestamp in seconds
        end (float): End timestamp in seconds

    Returns:
        tuple: A tuple containing (start_time_str, end_time_str) where both
            are formatted strings in SRT time format (HH:MM:SS,mmm)

    Note:
        - Hours, minutes, and seconds are zero-padded to 2 digits
        - Milliseconds are zero-padded to 3 digits
        - Rounds milliseconds to nearest integer value
    """
    start_hours = start // 3600
    start_minutes = (start % 3600) // 60
    start_seconds = start % 60
    start_milliseconds = round((start % 1) * 1000)

    end_hours = end // 3600
    end_minutes = (end % 3600) // 60
    end_seconds = end % 60
    end_milliseconds = round((end % 1) * 1000)

    start_time = f"{int(start_hours):02}:{int(start_minutes):02}:{int(start_seconds):02},{int(start_milliseconds):03}"
    end_time = f"{int(end_hours):02}:{int(end_minutes):02}:{int(end_seconds):02},{int(end_milliseconds):03}"

    return start_time, end_time


def srt_line_formatter(start_time, end_time, text, index):
    """
    Format a single subtitle entry in SRT format.

    This function creates a properly formatted SRT subtitle entry with sequential
    numbering, timestamp range, and text content according to SRT specifications.

    Args:
        start_time (str): Start timestamp in SRT format (HH:MM:SS,mmm)
        end_time (str): End timestamp in SRT format (HH:MM:SS,mmm)
        text (str): Subtitle text content to display
        index (int): Zero-based index that will be converted to 1-based subtitle number

    Returns:
        str: Complete SRT entry formatted as:
            {subtitle_number}
            {start_time} --> {end_time}
            {text}
            {blank_line}
    """
    index += 1
    line = f"{index}\n{start_time} --> {end_time}\n{text.strip()}\n\n"
    return line


def convert_json_to_srt_file(FILE_LIST, SRT_OUTPUT):
    """
    Convert JSON transcription files to SRT subtitle files.

    This function processes a list of JSON transcription files and converts each
    one to a corresponding SRT subtitle file. It handles the complete conversion
    process including timestamp formatting, text extraction, and SRT file generation.

    Args:
        FILE_LIST (list): List of absolute paths to JSON transcription files
        SRT_OUTPUT (str): Directory path where SRT files will be saved

    Returns:
        None: SRT files are written directly to the output directory

    Raises:
        json.JSONDecodeError: If input JSON files are malformed
        IOError: If unable to read input files or write output files

    Note:
        - Output filename format: {original_json_filename}.srt (replaces .json extension)
        - Files are opened in append mode, so existing content may accumulate
        - Progress is displayed with enumerated file processing messages
        - Each JSON chunk becomes one SRT subtitle entry
    """
    for count, file in enumerate(FILE_LIST):
        print("Converting JSON > SRT:", count + 1, "of", len(FILE_LIST))
        with open(file) as f:
            data = json.load(f)

        srt_name = os.path.basename(file).replace(".json", ".srt")
        srt_file = os.path.join(SRT_OUTPUT, srt_name)

        for index, value in enumerate(data):
            start, end, text = get_timecode_text(data, index)
            start_time, end_time = time_conversion(start, end)
            line = srt_line_formatter(start_time, end_time, text, index)

            with open(srt_file, "a") as f:
                f.write(line)
